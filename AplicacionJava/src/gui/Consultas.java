/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Utilidades.Conversion;
import clases.Cliente;
import clases.Poblacion;
import clases.Provincia;
import clases.callespoblaciones;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author carranza
 */
public class Consultas extends javax.swing.JFrame {
    ResultSet conjuntoResultados = null;
    List<Provincia> listaProvincias = new ArrayList<>();
    List<Poblacion> listaPoblaciones = new ArrayList<>();
    List<callespoblaciones> listaCalles = new ArrayList<>();
    List<Cliente> listaClientes = new ArrayList<>();
    String codigoProvinciaAux;
    String codigoPoblacionAux;
    String codigoCalleAux;
    String pobActual = null;
    boolean porCodigo=false;
    int opt=0;
    

    /**
     * Creates new form Consultas
     */
    public Consultas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        comboMesPob1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        panel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboProvPob = new javax.swing.JComboBox();
        comboMesPob = new javax.swing.JComboBox();
        btMes = new javax.swing.JButton();
        btAnio = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboPobPob = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaConPob = new javax.swing.JList();
        btConsultaPob = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btMesProv = new javax.swing.JButton();
        btAnioProv = new javax.swing.JButton();
        comboMesPro = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboProvProv = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaConProv = new javax.swing.JList();
        btConsultaProv = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaConCli = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        lbPob5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        ComboProv1 = new javax.swing.JComboBox();
        ComboPobla1 = new javax.swing.JComboBox();
        ComboCalle1 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtApellido3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtNumero1 = new javax.swing.JTextField();
        txtPiso1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtApellido1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtNombre1 = new javax.swing.JTextField();
        txtCodCliente = new javax.swing.JTextField();
        lbPob4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btAnioCli = new javax.swing.JButton();
        btMesCli = new javax.swing.JButton();
        comboMesCli = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaCli = new javax.swing.JList();
        jButton9 = new javax.swing.JButton();
        btConsultaCli = new javax.swing.JButton();

        jLabel6.setText("Selecciona Tipo Consulta");

        jButton5.setText("Año");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Mes");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        comboMesPob1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona el Mes" }));

        jLabel8.setText("jLabel8");

        setTitle("Consultas");

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });
        panel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                panelStateChanged(evt);
            }
        });

        jLabel3.setText("Selecciona Provincia");

        comboProvPob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProvPobActionPerformed(evt);
            }
        });

        btMes.setText("Mes");
        btMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMesActionPerformed(evt);
            }
        });

        btAnio.setText("Año");
        btAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnioActionPerformed(evt);
            }
        });

        jLabel4.setText("Selecciona Tipo Consulta");

        jLabel5.setText("Selecciona Poblacion");
        jLabel5.setToolTipText("");

        listaConPob.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listaConPob);

        btConsultaPob.setText("Realizar Consulta");
        btConsultaPob.setToolTipText("");
        btConsultaPob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultaPobActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btAnio)
                        .addGap(18, 18, 18)
                        .addComponent(btMes)
                        .addGap(18, 18, 18)
                        .addComponent(comboMesPob, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboProvPob, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(comboPobPob, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btConsultaPob)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboProvPob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboPobPob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnio)
                    .addComponent(btMes)
                    .addComponent(comboMesPob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btConsultaPob)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panel.addTab("Poblacion", jPanel2);

        btMesProv.setText("Mes");
        btMesProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMesProvActionPerformed(evt);
            }
        });

        btAnioProv.setText("Año");
        btAnioProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnioProvActionPerformed(evt);
            }
        });

        jLabel1.setText("Selecciona Provincia");

        jLabel2.setText("Selecciona Tipo Consulta");

        comboProvProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProvProvActionPerformed(evt);
            }
        });

        listaConProv.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(listaConProv);

        btConsultaProv.setText("Realizar Consulta");
        btConsultaProv.setToolTipText("");
        btConsultaProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultaProvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btAnioProv)
                                .addGap(18, 18, 18)
                                .addComponent(btMesProv)
                                .addGap(18, 18, 18)
                                .addComponent(comboMesPro, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboProvProv, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btConsultaProv)))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboProvProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnioProv)
                    .addComponent(btMesProv)
                    .addComponent(comboMesPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btConsultaProv)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(267, Short.MAX_VALUE))
        );

        panel.addTab("Provincia", jPanel1);

        jLabel10.setText("Piso");

        listaConCli.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaConCli);

        jLabel9.setText("Apellido");

        lbPob5.setText("Población");

        jLabel15.setText("Selecciona un Cliente de la Lista");

        ComboProv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboProv1ActionPerformed(evt);
            }
        });

        ComboPobla1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPobla1ActionPerformed(evt);
            }
        });

        ComboCalle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCalle1ActionPerformed(evt);
            }
        });

        jLabel11.setText("Nombre");

        txtApellido3.setEditable(false);

        jLabel12.setText("Apellido2");

        jLabel13.setText("Provincia");

        txtNumero1.setEditable(false);

        txtPiso1.setEditable(false);

        jLabel14.setText("Número");

        txtApellido1.setEditable(false);

        jLabel16.setText("Código Cliente");

        txtNombre1.setEditable(false);

        txtCodCliente.setEditable(false);

        lbPob4.setText("Calle");

        jLabel7.setText("Selecciona Tipo Consulta");

        btAnioCli.setText("Año");
        btAnioCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnioCliActionPerformed(evt);
            }
        });

        btMesCli.setText("Mes");
        btMesCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMesCliActionPerformed(evt);
            }
        });

        comboMesCli.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona el Mes" }));

        listaCli.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaCli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaCliMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaCli);

        jButton9.setText("Buscar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        btConsultaCli.setText("Realizar Consulta");
        btConsultaCli.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(lbPob5)
                                    .addComponent(lbPob4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ComboPobla1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ComboProv1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ComboCalle1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel9)
                            .addComponent(jLabel14))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtApellido1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtApellido3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(txtNumero1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPiso1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 100, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btAnioCli)
                                .addGap(18, 18, 18)
                                .addComponent(btMesCli)
                                .addGap(18, 18, 18)
                                .addComponent(comboMesCli, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7)
                            .addComponent(btConsultaCli))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(122, Short.MAX_VALUE)
                    .addComponent(jLabel16)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(419, 419, 419)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(ComboProv1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ComboPobla1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPob5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ComboCalle1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPob4)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(txtNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtApellido3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel10)
                            .addComponent(txtPiso1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNumero1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAnioCli)
                    .addComponent(btMesCli)
                    .addComponent(comboMesCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(btConsultaCli)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(540, Short.MAX_VALUE)))
        );

        panel.addTab("Cliente", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAnioProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnioProvActionPerformed
        pulsaAnio();
    }//GEN-LAST:event_btAnioProvActionPerformed

    private void btMesProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMesProvActionPerformed
        pulsaMes();
    }//GEN-LAST:event_btMesProvActionPerformed

    private void btMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMesActionPerformed
      pulsaMes();
    }//GEN-LAST:event_btMesActionPerformed

    private void btAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnioActionPerformed
       pulsaAnio();
    }//GEN-LAST:event_btAnioActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btMesCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMesCliActionPerformed
        pulsaMes();
    }//GEN-LAST:event_btMesCliActionPerformed

    private void btAnioCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnioCliActionPerformed
        pulsaAnio();
    }//GEN-LAST:event_btAnioCliActionPerformed

    private void panelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_panelStateChanged
       opt=panel.getSelectedIndex();
       rellenaProvincias();
    }//GEN-LAST:event_panelStateChanged

    private void ComboProv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboProv1ActionPerformed
        rellenaPoblacion();
    }//GEN-LAST:event_ComboProv1ActionPerformed

    private void ComboPobla1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPobla1ActionPerformed
        rellenaCalle();
    }//GEN-LAST:event_ComboPobla1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        rellenaClientes();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void listaCliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaCliMouseClicked
        rellenaTexto();
    }//GEN-LAST:event_listaCliMouseClicked

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked

    }//GEN-LAST:event_panelMouseClicked

    private void comboProvProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProvProvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboProvProvActionPerformed

    private void comboProvPobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProvPobActionPerformed
        rellenaPoblacion();
    }//GEN-LAST:event_comboProvPobActionPerformed

    private void ComboCalle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCalle1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboCalle1ActionPerformed

    private void btConsultaPobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultaPobActionPerformed
        realizaConsultas();
    }//GEN-LAST:event_btConsultaPobActionPerformed

    private void btConsultaProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultaProvActionPerformed
        realizaConsultas2();
    }//GEN-LAST:event_btConsultaProvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consultas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboCalle1;
    private javax.swing.JComboBox ComboPobla1;
    private javax.swing.JComboBox ComboProv1;
    private javax.swing.JButton btAnio;
    private javax.swing.JButton btAnioCli;
    private javax.swing.JButton btAnioProv;
    private javax.swing.JButton btConsultaCli;
    private javax.swing.JButton btConsultaPob;
    private javax.swing.JButton btConsultaProv;
    private javax.swing.JButton btMes;
    private javax.swing.JButton btMesCli;
    private javax.swing.JButton btMesProv;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboMesCli;
    private javax.swing.JComboBox comboMesPob;
    private javax.swing.JComboBox comboMesPob1;
    private javax.swing.JComboBox comboMesPro;
    private javax.swing.JComboBox comboPobPob;
    private javax.swing.JComboBox comboProvPob;
    private javax.swing.JComboBox comboProvProv;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbPob4;
    private javax.swing.JLabel lbPob5;
    private javax.swing.JList listaCli;
    private javax.swing.JList listaConCli;
    private javax.swing.JList listaConPob;
    private javax.swing.JList listaConProv;
    private javax.swing.JTabbedPane panel;
    private javax.swing.JTextField txtApellido1;
    private javax.swing.JTextField txtApellido3;
    private javax.swing.JTextField txtCodCliente;
    private javax.swing.JTextField txtNombre1;
    private javax.swing.JTextField txtNumero1;
    private javax.swing.JTextField txtPiso1;
    // End of variables declaration//GEN-END:variables

    public void noMostrar(){
        comboMesCli.setVisible(false);
        comboMesPob.setVisible(false);
        comboMesPro.setVisible(false);
    }
    
    
    public void Mostrar(){
        setVisible(true);
        setLocationRelativeTo(null);
        rellenaProvincias();
        noPermitir();
        activaBtConsulta(false);
    }
    
    
    private void pulsaAnio(){
        switch(opt){
            case 0: comboMesPob.setVisible(false);
                    btMes.setEnabled(true);
                    btAnio.setEnabled(false);
                    break;
            case 1: comboMesPro.setVisible(false);
                    btMesProv.setEnabled(true);
                    btAnioProv.setEnabled(false);
                    break;
            case 2: comboMesCli.setVisible(false);
                    btMesCli.setEnabled(true);
                    btAnioCli.setEnabled(false);
                    break;
               
        }
        
        activaBtConsulta(true);
    }
    
    private void pulsaMes(){
        switch(opt){
            case 0: comboMesPob.setVisible(true);
                    btMes.setEnabled(false);
                    btAnio.setEnabled(true);
                    rellenaMeses(comboMesPob);
                    break;
            case 1: comboMesPro.setVisible(true);
                    btMesProv.setEnabled(false);
                    btAnioProv.setEnabled(true);
                    rellenaMeses(comboMesPro);
                    break;
            case 2: comboMesCli.setVisible(true);
                    btMesCli.setEnabled(false);
                    btAnioCli.setEnabled(true);
                    rellenaMeses(comboMesCli);
                    break;
        
        }
        
        activaBtConsulta(true);
        
    }
    
    private void activaBtConsulta(boolean aux){
        switch(opt){
            case 0:btConsultaPob.setEnabled(aux);
                   break;
            case 1:btConsultaProv.setEnabled(aux);
                    break;
            case 2: btConsultaCli.setEnabled(aux);
                    break;
        }
        
    }
    
    private void noPermitir(){
        switch(opt){
            case 0: btMes.setEnabled(false);
                    btAnio.setEnabled(false);
                   break;
            case 1: btMesProv.setEnabled(false);
                    btAnioProv.setEnabled(false);
                   break;
            case 2: btMesCli.setEnabled(false);
                    btAnioCli.setEnabled(false);
                   break;
        
        }
        activaBtConsulta(false);
        noMostrar();
        
    }
    
    /**
     * Rellena el combo de Provincias
     */
    public void rellenaProvincias() {
        //Borra el combobox
        switch(opt){
            case 0: comboProvPob.removeAll();
                   break;
            case 1: comboProvProv.removeAll();
                   break;
            case 2: ComboProv1.removeAll();
                   break;
        }
        

        //Hago una consulta que me devuelva todas la provincias con sus códigos y las almaceno en conjuntoResultados
        try {
            conjuntoResultados = Principal.cbd.consultaSelect("SELECT * FROM  `provincias` ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }

        int numeroDeColumnas = 0;
        ResultSetMetaData metaDatos = null;


        try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();

            //creo el contador para ir pivotando entre las columnas de la tabla
            int cont = 0;
            String cod = null;
            String nom = null;

            while (conjuntoResultados.next()) {
                for (int i = 1; i <= numeroDeColumnas; i++) {

                    switch (cont) {
                        case 0:
                            cod = conjuntoResultados.getObject(i).toString();
                            cont = 1;
                            break;
                        case 1:
                            nom = conjuntoResultados.getObject(i).toString();
                            //creo un objeto provincia, variable
                            Provincia aux = new Provincia(cod, nom);
                            listaProvincias.add(aux);
                            cont = 0;
                            break;
                    }
                }
            }

            Iterator iterador = listaProvincias.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

            while (iterador.hasNext()) {
                Provincia pr = (Provincia) iterador.next();

                switch (opt) {
                    case 0:
                        comboProvPob.addItem(pr.getProvincia());
                        break;
                    case 1:
                        comboProvProv.addItem(pr.getProvincia());
                        pulsaAnio();
                        break;
                    case 2:
                        ComboProv1.addItem(pr.getProvincia());
                        break;
                }
                
               

                codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }
    }

    /**
     * Extrae el código de la provincia seleccionada segun el indice del
     * combobox
     */
    public String extraerCodigoProvinciaSeleccinada() {
        Provincia pAux=null;
        
        switch(opt){
            case 0: pAux = listaProvincias.get(comboProvPob.getSelectedIndex());
                    break;
            case 1: pAux = listaProvincias.get(comboProvProv.getSelectedIndex());
                    break;
            case 2: pAux = listaProvincias.get(ComboProv1.getSelectedIndex());
                    break;
        }
         

        return pAux.getCodigoProvincia();

    }

    /**
     * Extrae el código de la poblacion seleccionada segun el indice del
     * combobox
     */
    public String extraerCodigoPoblacionSeleccinada() {
        Poblacion pAux = listaPoblaciones.get(comboPobPob.getSelectedIndex());
                   
        pobActual = pAux.getNombrePob();
        return pAux.getCodPoblacion();
    }
    
    public String extraerCodigoPoblacionSeleccinada2() {
        Poblacion pAux = listaPoblaciones.get(ComboPobla1.getSelectedIndex());
                    
        pobActual = pAux.getNombrePob();
        return pAux.getCodPoblacion();
    }

    /**
     * Extrae el codigo de la calle seleccionada el combo
     *
     * @return
     */
    public String extraerCodigoCalleSeleccinada() {

        
        callespoblaciones cAux = listaCalles.get(ComboCalle1.getSelectedIndex());
        
        
        return cAux.getIdCalle();

    }

    /**
     * Metodo encargado de rellenar el combo de poblacion
     */
    public void rellenaPoblacion() {

        //Borra el combobox
        switch(opt){
            case 0: comboPobPob.removeAllItems();
                   break;
            case 2: ComboPobla1.removeAllItems();
                   break;
        }
        
        //Borra la lista de poblaciones
        listaPoblaciones.clear();
        //Extrae el codigo de la provincia seleccionada
        codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();

        ResultSet results = null;

        //Hago una consulta que me devuelva las poblaciones de la provincia seleccionada
        try {
            results = Principal.cbd.consultaSelect("SELECT CodigoProvincia,CodigoPoblacion,Poblacion FROM poblaciones WHERE CodigoProvincia=" + codigoProvinciaAux);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }

        //Declaro algunas variables para poder rellenar el combo
        int numeroDeColumnas = 0;
        ResultSetMetaData metaDatos = null;


        try {
            metaDatos = results.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();

            //Creo el contador para ir pivotando entre las columnas de la tabla
            int cont = 0;
            //Variables que almacenan los datos que se añaden al final del bucle
            String codProv = null;
            String codPob = null;
            String nom = null;

            while (results.next()) {
                for (int i = 1; i <= numeroDeColumnas; i++) {

                    switch (cont) {
                        case 0:
                            codProv = results.getObject(i).toString();
                            cont = 1;
                            break;
                        case 1:
                            codPob = results.getObject(i).toString();
                            cont = 2;
                            break;
                        case 2:
                            nom = results.getObject(i).toString();
                            //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                            Poblacion aux = new Poblacion(codProv, codPob, nom);
                            listaPoblaciones.add(aux);
                            cont = 0; //para que vuelva a rellenar desde el primer campo
                            break;
                    }
                }
            }

            //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
            Iterator iterador = listaPoblaciones.listIterator();

            //En caso de no existir ninguna poblacion para la provincia muestro en el combo vacio, sino relleno el combo
            if (listaPoblaciones.isEmpty()) {
                switch (opt) {
                    case 0:
                        comboPobPob.addItem("--Vacío--");
                        noPermitir();
                        break;
                    case 2:
                        ComboPobla1.addItem("--Vacío--");
                        break;
                }
                

                codigoPoblacionAux = null;
            } else {
                while (iterador.hasNext()) {
                    Poblacion pr = (Poblacion) iterador.next();
                    switch (opt) {
                        case 0:
                            comboPobPob.addItem(pr.getNombrePob());
                            pulsaAnio();
                            break;
                        case 2:
                            ComboPobla1.addItem(pr.getNombrePob());
                            break;
                    }
                    
                }

                codigoPoblacionAux = extraerCodigoPoblacionSeleccinada();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }

    }

    /**
     * Rellena el combo de la calle
     */
    public void rellenaCalle() {
        String op = null;

        try {

            //Borra el combobox
            ComboCalle1.removeAllItems();
            //Borra la lista de calles
            listaCalles.clear();
            //Extrae el codigo de la poblacion seleccionada
            switch(opt){
                case 0: codigoPoblacionAux = extraerCodigoPoblacionSeleccinada();
                    return;
                    //break;
                case 2: codigoPoblacionAux = extraerCodigoPoblacionSeleccinada2();
                    break;
            }
            

            ResultSet results2 = null;



            //Hago una consulta que me devuelva las calles de la poblacion seleccionada
            try {

                results2 = Principal.cbd.consultaSelect("SELECT idCalle,CodPoblacion,Nombre FROM callespoblaciones WHERE CodPoblacion=" + codigoPoblacionAux);


            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
            }

            //Declaro algunas variables para poder rellenar el combo
            int numeroDeColumnas = 0;
            ResultSetMetaData metaDatos = null;


            try {
                metaDatos = results2.getMetaData();
                numeroDeColumnas = metaDatos.getColumnCount();

                //Creo el contador para ir pivotando entre las columnas de la tabla
                int cont = 0;
                //Variables que almacenan los datos que se añaden al final del bucle
                String idCalle = null;
                String codPob = null;
                String nom = null;


                while (results2.next()) {
                    for (int i = 1; i <= numeroDeColumnas; i++) {

                        switch (cont) {
                            case 0:
                                idCalle = results2.getObject(i).toString();
                                cont = 1;
                                break;
                            case 1:
                                codPob = results2.getObject(i).toString();
                                cont = 2;
                                break;
                            case 2:
                                nom = results2.getObject(i).toString();
                                //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                                callespoblaciones aux = new callespoblaciones(idCalle, codPob, nom);
                                listaCalles.add(aux);
                                cont = 0; //para que vuelva a rellenar desde el primer campo
                                break;
                        }
                    }

                }

                //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Iterator iterador = listaCalles.listIterator();

                //En caso de no existir ningun objeto para el codigo seleccionado muestro en el combo vacio, sino relleno el combo
                if (listaCalles.isEmpty()) {
                    ComboCalle1.addItem("--Vacío--");

                    codigoCalleAux = null;
                } else {
                    while (iterador.hasNext()) {
                        callespoblaciones pr = (callespoblaciones) iterador.next();
                        if (pr.getNombre().equals(ComboPobla1.getSelectedItem().toString())) {
                            ComboCalle1.removeAll();
                            ComboCalle1.addItem("--Vacío--");
                        } else {
                            ComboCalle1.addItem(pr.getNombre());
                            op = pr.getNombre();
                        }
                    }

                    codigoCalleAux = extraerCodigoCalleSeleccinada();
                }

                //Controla problema de duplicidad comboBox
                if (pobActual.equals(op)) {
                    ComboCalle1.removeAllItems();
                    ComboCalle1.addItem("--Vacío--");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
            }
            //Controla la posibilidad de que se pulse el botón actualizar calles antes de tiempo
        } catch (IndexOutOfBoundsException asd) {
            ComboCalle1.addItem("--Vacío--");
        }
    }

    /**
     * Metodo encargado de rellenar la lista de clientes
     *
     */
    public void rellenaClientes() {

        borrarTexto();
        
        if (ComboCalle1.getSelectedItem().toString().equals("--Vacío--") && ComboPobla1.getSelectedItem().toString().equals("--Vacío--")) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar Provincia, Poblacion y Calle");
        } else {

            //Borra la lista de calles
            listaClientes.clear();
            //Extrae los codigos de los combos seleccionados
            codigoCalleAux = extraerCodigoCalleSeleccinada();
            codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();
            codigoPoblacionAux = extraerCodigoPoblacionSeleccinada();

            ResultSet results3 = null;


            //Hago una consulta que me devuelva los usuarios según su calle
            try {
                listaClientes.clear();

                results3 = Principal.cbd.consultaSelect("SELECT Codigo,Nombre,Apellido,Apellido2,Calle,Numero,Piso,Metros FROM clientes WHERE Calle=" + codigoCalleAux);

                int numeroDeColumnas = 0;
                ResultSetMetaData metaDatos = null;

                metaDatos = results3.getMetaData();
                numeroDeColumnas = metaDatos.getColumnCount();

                //Creo el contador para ir pivotando entre las columnas de la tabla
                int cont = 0;
                //Variables que almacenan los datos que se añaden al final del bucle
                String codigo = null;
                String nombre = null;
                String apellido = null;
                String apellido2 = null;
                String calle = null;
                String numero = null;
                String piso = null;
                String metros = null;


                while (results3.next()) {
                    for (int i = 1; i <= numeroDeColumnas; i++) {

                        switch (cont) {
                            case 0:
                                codigo = results3.getObject(i).toString();
                                cont = 1;
                                break;
                            case 1:
                                nombre = results3.getObject(i).toString();
                                cont = 2;
                                break;
                            case 2:
                                apellido = results3.getObject(i).toString();
                                cont = 3;
                                break;
                            case 3:
                                apellido2 = results3.getObject(i).toString();
                                cont = 4;
                                break;
                            case 4:
                                calle = results3.getObject(i).toString();
                                cont = 5;
                                break;
                            case 5:
                                numero = results3.getObject(i).toString();
                                cont = 6;
                                break;
                            case 6:
                                piso = results3.getObject(i).toString();
                                cont = 7;
                                break;
                            case 7:
                                metros = results3.getObject(i).toString();
                                //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                                Cliente aux = new Cliente(codigo, nombre, apellido, apellido2, calle, numero, piso, metros);
                                listaClientes.add(aux);
                                cont = 0; //para que vuelva a rellenar desde el primer campo
                                break;
                        }
                    }

                }


                DefaultListModel listaAux = new DefaultListModel();


                //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Iterator iterador = listaClientes.listIterator();
                //Limpia la jlist
                listaAux.clear();

                //En caso de no existir ningun objeto para el codigo seleccionado muestro en el combo vacio, sino relleno el combo
                if (listaClientes.isEmpty()) {
                    listaAux.clear();
                    listaAux.addElement("--Vacío--");
                    codigoCalleAux = null;
                } else {
                    while (iterador.hasNext()) {
                        Cliente cli = (Cliente) iterador.next();
                        listaAux.addElement("Cod: " + cli.getCodigo() + ", --> Nombre: " + cli.getNombre() + ", Apellidos: " + cli.getApellido() + ", " + cli.getApellido2());
                    }
                }

                listaCli.setModel(listaAux);


            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos" + ex.getMessage());
            }
        }
        if(txtCodCliente.getText().equals("")){
            noPermitir();
        }else{
            pulsaAnio();
        }
    }

    public Cliente extraeClienteDeLista() {
        int indice = listaCli.getSelectedIndex();
        return listaClientes.get(indice);
    }

    public void rellenaTexto() {
  
        if (!listaClientes.isEmpty()) {
            Cliente cli = extraeClienteDeLista();
            txtNombre1.setText(cli.getNombre());
            txtApellido1.setText(cli.getApellido());
            txtApellido3.setText(cli.getApellido2());
            txtNumero1.setText(cli.getNumero());
            txtPiso1.setText(cli.getPiso());
            txtCodCliente.setText(cli.getCodigo());
        }else{
            borrarTexto();
        }
        
    }
    
    private void borrarTexto(){
            txtNombre1.setText("");
            txtApellido1.setText("");
            txtApellido3.setText("");
            txtNumero1.setText("");
            txtPiso1.setText("");
            txtCodCliente.setText("");
     
    }
    
    private void rellenaMeses(JComboBox comboAux){
        
        comboAux.removeAllItems();
        comboAux.addItem("Mes Actual");
        comboAux.addItem("Enero");
        comboAux.addItem("Febrero");
        comboAux.addItem("Marzo");
        comboAux.addItem("Abril");
        comboAux.addItem("Mayo");
        comboAux.addItem("Junio");
        comboAux.addItem("Julio");
        comboAux.addItem("Agosto");
        comboAux.addItem("Septiembre");
        comboAux.addItem("Octubre");
        comboAux.addItem("Noviembre");
        comboAux.addItem("Diciembre");
    }
    
    private void realizaConsultas(){
        codigoPoblacionAux=extraerCodigoPoblacionSeleccinada();
        ResultSet resultado= null;
        Conversion conversionC = new Conversion();
        
        if(comboPobPob.getSelectedItem().equals("--Vacío--")){
            JOptionPane.showMessageDialog(null, "Debe selecccionar una población para realizar la consulta");
        }else{
            try {
                if (!btMes.isEnabled()) {
                    if(comboMesPob.getSelectedIndex()==0){
                        resultado = Principal.cbd.consultaSelect("select SUM(KW) from mediciones where Cliente in (select Codigo from clientes "
                            + "where CodigoProvincia='"+codigoProvinciaAux+"') and FechaHora between " + conversionC.obetenerMesActual());
                    }else{
                        resultado = Principal.cbd.consultaSelect("select SUM(KW) from mediciones where Cliente in (select Codigo from clientes "
                            + "where CodigoProvincia='"+codigoProvinciaAux+"') and FechaHora between " + conversionC.obtenerMesCualquiera(comboMesPob.getSelectedIndex()));
                    }
                    

                } else {


                    resultado = Principal.cbd.consultaSelect("select AVG (suma) from (select sum(KW) as suma from mediciones where Cliente in "
                            + "(select Codigo from clientes where CodigoPoblacion='" + codigoPoblacionAux + "')"
                            + " and FechaHora between" + conversionC.obtenerYear() + " Group by MONTH (FechaHora)) as t1");

                }
                
                pintar(resultado);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos" + ex.getMessage());
            }
        }
    }
     private void realizaConsultas2(){
        codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
       
        ResultSet resultado= null;
        Conversion conversionC = new Conversion();
        
        if(comboProvProv.getSelectedItem().equals("--Vacío--")){
            JOptionPane.showMessageDialog(null, "Debe selecccionar una población para realizar la consulta");
        }else{
            try {
                if (!btMesProv.isEnabled()) {
                    if(comboMesPro.getSelectedIndex()==0){
                        resultado = Principal.cbd.consultaSelect("select SUM(KW) from mediciones where Cliente in (select Codigo from clientes "
                            + "where CodigoProvincia='"+codigoProvinciaAux+"') and FechaHora between " + conversionC.obetenerMesActual());
                    }else{
                        resultado = Principal.cbd.consultaSelect("select SUM(KW) from mediciones where Cliente in (select Codigo from clientes "
                            + "where CodigoProvincia='"+codigoProvinciaAux+"') and FechaHora between " + conversionC.obtenerMesCualquiera(comboMesPro.getSelectedIndex()));
                    }
                    

                } else {

                    resultado = Principal.cbd.consultaSelect("select AVG (suma) from (select sum(KW) as suma from mediciones where Cliente in "
                            + "(select Codigo from clientes where CodigoProvincia='" + codigoProvinciaAux + "')"
                            + " and FechaHora between" + conversionC.obtenerYear() + " Group by MONTH (FechaHora)) as t1");

                }
                
                pintar(resultado);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos" + ex.getMessage());
            }
        }
    }
    
    
    private void pintar(ResultSet cadena){
        DefaultListModel listaAux = new DefaultListModel();
        
        listaAux.clear();
        try {
          
            
            //System.out.println(Principal.cbd.totalFilas());
            if(!cadena.first()){
                listaAux.addElement("No existen mediciones");
            }else{
               // cadena.next();
                listaAux.addElement(cadena.getObject(1).toString());
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos" + ex.getMessage());
        } catch (NullPointerException ex){
            listaAux.addElement("No existen mediciones");
        }
        
        switch(opt){
            case 0: listaConPob.setModel(listaAux);
                    break;
            case 1: listaConProv.setModel(listaAux);
                    break;
            case 2: listaConCli.setModel(listaAux);
                    break;
        }
        
    
    }
}
