package gui;

import aplicacionjava.Poblacion;
import aplicacionjava.Provincia;
import aplicacionjava.callespoblaciones;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * Formulario para insertar una nueva calle o una población
 * 
 * @author Enrique José Miguel Calvo, Saúl Carranza Gallardo
 * @version 1.0
 * 
 * Sistemas de Información -  Grado Ingeniería Informática T.I. 
 * Curso 2012/13
 * 
 */public class BajaCallePoblacion extends javax.swing.JFrame {
    //Declaración de variables
    ResultSet conjuntoResultados=null;
    List<Provincia> listaProvincias = new ArrayList<>();
    List<Poblacion> listaPoblaciones = new ArrayList<>();
    List<callespoblaciones> listaCalles = new ArrayList<>();
    String codigoProvinciaAux;
    String codigoPoblacionAux;
    String codigoCalleAux;
    int opcionSeleccionada=-1;
    String pobActual = null;
    aplicacionjava.Conversion conAux = new aplicacionjava.Conversion();

    /**
     * Creates new form NuevaCallePoblacion
     */
    public BajaCallePoblacion() {
        initComponents();
        
        setLocationRelativeTo(null);
        
        rellenaProvincias();
        
        codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
        
        rellenaPoblacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbPob1 = new javax.swing.JLabel();
        lbCalle = new javax.swing.JLabel();
        ComboProvincia = new javax.swing.JComboBox();
        ComboPoblacion = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        btAceptar = new javax.swing.JButton();
        ComboCalle = new javax.swing.JComboBox();

        setTitle("Baja Calle");

        jLabel1.setText("Provincia");

        lbPob1.setText("Población");

        lbCalle.setText("Calle");

        ComboProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboProvinciaActionPerformed(evt);
            }
        });

        ComboPoblacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        ComboPoblacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPoblacionActionPerformed(evt);
            }
        });

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btAceptar.setText("Aceptar");
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        ComboCalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCalleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lbPob1)
                            .addComponent(lbCalle))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ComboProvincia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ComboPoblacion, 0, 184, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton1)
                        .addGap(42, 42, 42)
                        .addComponent(btAceptar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPob1))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCalle)
                    .addComponent(ComboCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btAceptar))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cierra el formulario
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Llama al metodo de rellenar el combo de poblaciones
     * @param evt 
     */
    private void ComboProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboProvinciaActionPerformed
        rellenaPoblacion();
    }//GEN-LAST:event_ComboProvinciaActionPerformed

    /**
     * Llama al metodo que controla cuando se pulsa el boton aceptar
     * @param evt 
     */
    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed
       Aceptar();
    }//GEN-LAST:event_btAceptarActionPerformed

    private void ComboCalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCalleActionPerformed
        //rellenaCalle();
    }//GEN-LAST:event_ComboCalleActionPerformed

    private void ComboPoblacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPoblacionActionPerformed
        rellenaCalle();
    }//GEN-LAST:event_ComboPoblacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BajaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BajaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BajaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BajaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BajaCallePoblacion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboCalle;
    private javax.swing.JComboBox ComboPoblacion;
    private javax.swing.JComboBox ComboProvincia;
    private javax.swing.JButton btAceptar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbCalle;
    private javax.swing.JLabel lbPob1;
    // End of variables declaration//GEN-END:variables

    /**
     * Muestra el formulario en la opcion de introducir poblacion
     * 
     */
    public void Mostrar1(){
        setVisible(true);
        
        lbCalle.setVisible(false);
        ComboPoblacion.setVisible(false);
        lbPob1.setVisible(false);
        opcionSeleccionada=1;
        btAceptar.requestFocusInWindow();
    }
    
    /**
     * Muestra el formulario en la opcion de introducir calles
     * 
     */
    public void Mostrar2(){
        setVisible(true);
        
       opcionSeleccionada=2;
        btAceptar.requestFocusInWindow();
    }
    
    /**
     *Rellena el combo de Provincias
     * 
     */
    private void rellenaProvincias(){
        //Borra el combobox
        ComboProvincia.removeAllItems();
        
        //Hago una consulta que me devuelva todas la provincias con sus códigos y las almaceno en conjuntoResultados
        try {
            conjuntoResultados=Principal.cbd.consultaSelect("SELECT * FROM  provincias");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
         int numeroDeColumnas=0;
         ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            String cod=null;
            String nom=null;
            
            while (conjuntoResultados.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: cod=conjuntoResultados.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: nom=conjuntoResultados.getObject(i).toString();
                            //creo un objeto provincia, variable
                            Provincia aux = new Provincia(cod,nom); 
                            listaProvincias.add(aux);
                            cont=0;
                            break;
                }
            }
          }
            //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
            Iterator iterador = listaProvincias.listIterator(); 
 
            while( iterador.hasNext() ) {
                Provincia pr=(Provincia) iterador.next();
                
                ComboProvincia.addItem(pr.getProvincia());
                
                codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
                }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
    }
    
    /**
     * Rellena el combo de Poblacion
     * 
     */
    private void rellenaPoblacion(){
        
        //Borra el combobox
        ComboPoblacion.removeAllItems();
        //Borra la lista de poblaciones
        listaPoblaciones.clear();
        //Extrae el codigo de la provincia seleccionada
        codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();
    
        //Hago una consulta que me devuelva las poblaciones de la provincia seleccionada
        try {
            conjuntoResultados=Principal.cbd.consultaSelect("SELECT CodigoProvincia,CodigoPoblacion,Poblacion FROM poblaciones WHERE CodigoProvincia="+codigoProvinciaAux);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
         //Declaro algunas variables para poder rellenar el combo
        int numeroDeColumnas=0;
        ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //Creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            //Variables que almacenan los datos que se añaden al final del bucle
            String codProv=null;
            String codPob=null;
            String nom=null;
            
            while (conjuntoResultados.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: codProv=conjuntoResultados.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: codPob=conjuntoResultados.getObject(i).toString();
                            cont=2;
                            break;
                    case 2: nom=conjuntoResultados.getObject(i).toString();
                            //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                            Poblacion aux = new Poblacion(codProv,codPob,nom); 
                            listaPoblaciones.add(aux);
                            cont=0; //para que vuelva a rellenar desde el primer campo
                            break;
                }
            }
          }
            
         //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
         Iterator iterador = listaPoblaciones.listIterator();
         
         //En caso de no existir ninguna poblacion para la provincia muestro en el combo vacio, sino relleno el combo
         if(listaPoblaciones.isEmpty()){
             ComboPoblacion.addItem("--Vacío--");
             
             codigoPoblacionAux=null;
         }
         else
         {
             while( iterador.hasNext() ) {
              Poblacion pr=(Poblacion) iterador.next();
          
               ComboPoblacion.addItem(pr.getNombrePob());
                }
             
             codigoPoblacionAux=extraerCodigoPoblacionSeleccinada();
         }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
    }
    
   /**
    * Extrae el código de la provincia seleccionada segun el indice del combobox 
    * 
    */
   private String extraerCodigoProvinciaSeleccinada(){
       
       Provincia pAux = listaProvincias.get(ComboProvincia.getSelectedIndex());
       
       return pAux.getCodigoProvincia();
       
   }
   
   /**
    * Extrae el código de la poblacion seleccionada segun el indice del combobox
    * 
    */
   private String extraerCodigoPoblacionSeleccinada(){
       
       Poblacion pAux = listaPoblaciones.get(ComboPoblacion.getSelectedIndex());
       pobActual = pAux.getNombrePob();
       return pAux.getCodPoblacion();
      
   }
   
       /**
     * Extrae el codigo de la calle seleccionada el combo
     *
     * @return
     */
    private String extraerCodigoCalleSeleccinada() {

        
        callespoblaciones cAux = listaCalles.get(ComboCalle.getSelectedIndex());
        
        
        return cAux.getIdCalle();

    }
    
       /**
     * Rellena el combo de la calle
     */
    private void rellenaCalle() {
        String op = null;

        try {

            //Borra el combobox
            ComboCalle.removeAllItems();
            //Borra la lista de calles
            listaCalles.clear();
            //Extrae el codigo de la poblacion seleccionada
            codigoPoblacionAux = extraerCodigoPoblacionSeleccinada();

            ResultSet results2 = null;



            //Hago una consulta que me devuelva las calles de la poblacion seleccionada
            try {

                results2 = Principal.cbd.consultaSelect("SELECT idCalle,CodPoblacion,Nombre FROM callespoblaciones WHERE CodPoblacion=" + codigoPoblacionAux);


            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
            }

            //Declaro algunas variables para poder rellenar el combo
            int numeroDeColumnas = 0;
            ResultSetMetaData metaDatos = null;


            try {
                metaDatos = results2.getMetaData();
                numeroDeColumnas = metaDatos.getColumnCount();

                //Creo el contador para ir pivotando entre las columnas de la tabla
                int cont = 0;
                //Variables que almacenan los datos que se añaden al final del bucle
                String idCalle = null;
                String codPob = null;
                String nom = null;


                while (results2.next()) {
                    for (int i = 1; i <= numeroDeColumnas; i++) {

                        switch (cont) {
                            case 0:
                                idCalle = results2.getObject(i).toString();
                                cont = 1;
                                break;
                            case 1:
                                codPob = results2.getObject(i).toString();
                                cont = 2;
                                break;
                            case 2:
                                nom = results2.getObject(i).toString();
                                //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                                callespoblaciones aux = new callespoblaciones(idCalle, codPob, nom);
                                listaCalles.add(aux);
                                cont = 0; //para que vuelva a rellenar desde el primer campo
                                break;
                        }
                    }

                }

                //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Iterator iterador = listaCalles.listIterator();

                //En caso de no existir ningun objeto para el codigo seleccionado muestro en el combo vacio, sino relleno el combo
                if (listaCalles.isEmpty()) {
                    ComboCalle.addItem("--Vacío--");

                    codigoCalleAux = null;
                } else {
                    while (iterador.hasNext()) {
                        callespoblaciones pr = (callespoblaciones) iterador.next();
                        if (pr.getNombre().equals(ComboPoblacion.getSelectedItem().toString())) {
                            ComboCalle.removeAll();
                            ComboCalle.addItem("--Vacío--");
                        } else {
                            ComboCalle.addItem(pr.getNombre());
                            op = pr.getNombre();
                        }
                    }

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
            }
            //Controla la posibilidad de que se pulse el botón actualizar calles antes de tiempo
        } catch (IndexOutOfBoundsException asd) {
            ComboCalle.addItem("--Vacío--");
        }
    }
   
   /**
    * Metodo al que se llama cuando se pulsa aceptar
    * 
    */
   private void Aceptar(){
        if (ComboCalle.getSelectedItem().toString().equals("--Vacío--")) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una calle");
        } else {
            // control de qu hay una calle seleccionada
            codigoCalleAux = extraerCodigoCalleSeleccinada();
            try {
                //borramos la calle
                Principal.cbd.consultaUpdate("DELETE from callespoblaciones WHERE idCalle=" + codigoCalleAux);
                //borramos las mediciones
                Principal.cbd.consultaUpdate("DELETE FROM mediciones WHERE Cliente in (Select Codigo from clientes where calle=" + codigoCalleAux + ")");
                // borramos los clientes
                Principal.cbd.consultaUpdate("DELETE FROM clientes WHERE calle=" + codigoCalleAux);

                JOptionPane.showMessageDialog(null, "Se ha eliminado todas las mediciones, clientes de la calle"
                        + "\n Y se ha borrado la calle");
                this.setVisible(false);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos" + ex.getMessage());
            }
        }
    }
}
