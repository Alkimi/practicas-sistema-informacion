/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import aplicacionjava.Poblacion;
import aplicacionjava.Provincia;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author carranza
 */
public class NuevaCallePoblacion extends javax.swing.JFrame {
    //Declaraci贸n de variables
    ResultSet conjuntoResultados=null;
    List<Provincia> listaProvincias = new ArrayList<>();
    List<Poblacion> listaPoblaciones = new ArrayList<>();
    String codigoProvinciaAux;
    String codigoPoblacionAux;
    int opcionSeleccionada=-1;
    aplicacionjava.Conversion conAux = new aplicacionjava.Conversion();

    /**
     * Creates new form NuevaCallePoblacion
     */
    public NuevaCallePoblacion() {
        initComponents();
        
        setLocationRelativeTo(null);
        
        rellenaProvincias();
        
        codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
        
        rellenaPoblacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbPob1 = new javax.swing.JLabel();
        lbCalle = new javax.swing.JLabel();
        ComboProvincia = new javax.swing.JComboBox();
        ComboPoblacion = new javax.swing.JComboBox();
        txtCalle = new javax.swing.JTextField();
        txtPoblacion = new javax.swing.JTextField();
        lbPob2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btAceptar = new javax.swing.JButton();
        lbHab = new javax.swing.JLabel();
        txtNumHab = new javax.swing.JTextField();
        lbCP = new javax.swing.JLabel();
        txtCP = new javax.swing.JTextField();

        setTitle("Nueva Calle o Poblacion");

        jLabel1.setText("Provincia");

        lbPob1.setText("Poblaci贸n");

        lbCalle.setText("Calle");

        ComboProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboProvinciaActionPerformed(evt);
            }
        });

        ComboPoblacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));

        txtCalle.setText("Nombre de la calle");
        txtCalle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCalleFocusGained(evt);
            }
        });

        txtPoblacion.setText("Nombre de la poblacion");
        txtPoblacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPoblacionFocusGained(evt);
            }
        });

        lbPob2.setText("Poblaci贸n");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btAceptar.setText("Aceptar");
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        lbHab.setText("Habitantes");

        txtNumHab.setText("Numero de Habitantes");
        txtNumHab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumHabFocusGained(evt);
            }
        });

        lbCP.setText("CodPostal");

        txtCP.setText("C贸digo Postal");
        txtCP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCPFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(lbPob1)
                                    .addComponent(lbPob2))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ComboProvincia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ComboPoblacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPoblacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbCalle)
                                    .addComponent(lbHab)
                                    .addComponent(lbCP))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCalle)
                                    .addComponent(txtNumHab)
                                    .addComponent(txtCP)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton1)
                        .addGap(42, 42, 42)
                        .addComponent(btAceptar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPob1))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPob2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCalle)
                    .addComponent(txtCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbHab)
                    .addComponent(txtNumHab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCP)
                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btAceptar))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cierra el formulario
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Llama al metodo de rellenar el combo de poblaciones
     * @param evt 
     */
    private void ComboProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboProvinciaActionPerformed
        rellenaPoblacion();
    }//GEN-LAST:event_ComboProvinciaActionPerformed

    /**
     * Llama al metodo que controla cuando se pulsa el boton aceptar
     * @param evt 
     */
    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed
       Aceptar();
    }//GEN-LAST:event_btAceptarActionPerformed

    /**
     * Deja la caja de texto vacia cuando pulsamos sobre ella
     * @param evt 
     */
    private void txtPoblacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPoblacionFocusGained
        txtPoblacion.setText("");
    }//GEN-LAST:event_txtPoblacionFocusGained

    /**
     * Deja la caja de texto vacia cuando pulsamos sobre ella
     * @param evt 
     */
    private void txtCalleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCalleFocusGained
        txtCalle.setText("");
    }//GEN-LAST:event_txtCalleFocusGained

    private void txtNumHabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumHabFocusGained
        txtNumHab.setText("");
    }//GEN-LAST:event_txtNumHabFocusGained

    private void txtCPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCPFocusGained
        txtCP.setText("");
    }//GEN-LAST:event_txtCPFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevaCallePoblacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevaCallePoblacion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboPoblacion;
    private javax.swing.JComboBox ComboProvincia;
    private javax.swing.JButton btAceptar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbCP;
    private javax.swing.JLabel lbCalle;
    private javax.swing.JLabel lbHab;
    private javax.swing.JLabel lbPob1;
    private javax.swing.JLabel lbPob2;
    private javax.swing.JTextField txtCP;
    private javax.swing.JTextField txtCalle;
    private javax.swing.JTextField txtNumHab;
    private javax.swing.JTextField txtPoblacion;
    // End of variables declaration//GEN-END:variables

    /**
     * Muestra el formulario en la opcion de introducir poblacion
     * 
     */
    public void Mostrar1(){
        setVisible(true);
        
        lbCalle.setVisible(false);
        txtCalle.setVisible(false);
        ComboPoblacion.setVisible(false);
        lbPob1.setVisible(false);
        opcionSeleccionada=1;
        btAceptar.requestFocusInWindow();
        lbCP.setVisible(false);
        txtCP.setVisible(false);
        
    }
    
    /**
     * Muestra el formulario en la opcion de introducir calles
     * 
     */
    public void Mostrar2(){
        setVisible(true);
        
        txtPoblacion.setVisible(false);
        lbPob2.setVisible(false);
        opcionSeleccionada=2;
        btAceptar.requestFocusInWindow();
        lbHab.setVisible(false);
        txtNumHab.setVisible(false);
    }
    
    /**
     *Rellena el combo de Provincias
     * 
     */
    public void rellenaProvincias(){
        //Borra el combobox
        ComboProvincia.removeAllItems();
        
        //Hago una consulta que me devuelva todas la provincias con sus c贸digos y las almaceno en conjuntoResultados
        try {
            conjuntoResultados=Principal.cbd.consultaSelect("SELECT * FROM  `provincias` ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos");
        }
        
         int numeroDeColumnas=0;
         ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            String cod=null;
            String nom=null;
            
            while (conjuntoResultados.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: cod=conjuntoResultados.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: nom=conjuntoResultados.getObject(i).toString();
                            //creo un objeto provincia, variable
                            Provincia aux = new Provincia(cod,nom); 
                            listaProvincias.add(aux);
                            cont=0;
                            break;
                }
            }
          }
            //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
            Iterator iterador = listaProvincias.listIterator(); 
 
            while( iterador.hasNext() ) {
                Provincia pr=(Provincia) iterador.next();
                
                ComboProvincia.addItem(pr.getProvincia());
                
                codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
                }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos");
        }
    }
    
    /**
     * Rellena el combo de Poblacion
     * 
     */
    public void rellenaPoblacion(){
        
        //Borra el combobox
        ComboPoblacion.removeAllItems();
        //Borra la lista de poblaciones
        listaPoblaciones.clear();
        //Extrae el codigo de la provincia seleccionada
        codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();
    
        //Hago una consulta que me devuelva las poblaciones de la provincia seleccionada
        try {
            conjuntoResultados=Principal.cbd.consultaSelect("SELECT CodigoProvincia,CodigoPoblacion,Poblacion FROM poblaciones WHERE CodigoProvincia="+codigoProvinciaAux);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos");
        }
        
         //Declaro algunas variables para poder rellenar el combo
        int numeroDeColumnas=0;
        ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //Creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            //Variables que almacenan los datos que se a帽aden al final del bucle
            String codProv=null;
            String codPob=null;
            String nom=null;
            
            while (conjuntoResultados.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: codProv=conjuntoResultados.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: codPob=conjuntoResultados.getObject(i).toString();
                            cont=2;
                            break;
                    case 2: nom=conjuntoResultados.getObject(i).toString();
                            //Creo un objeto poblacion y a帽ado los datos que se han ido recogiendo el switch
                            Poblacion aux = new Poblacion(codProv,codPob,nom); 
                            listaPoblaciones.add(aux);
                            cont=0; //para que vuelva a rellenar desde el primer campo
                            break;
                }
            }
          }
            
         //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
         Iterator iterador = listaPoblaciones.listIterator();
         
         //En caso de no existir ninguna poblacion para la provincia muestro en el combo vacio, sino relleno el combo
         if(listaPoblaciones.isEmpty()){
             ComboPoblacion.addItem("--Vac铆o--");
             
             codigoPoblacionAux=null;
         }
         else
         {
             while( iterador.hasNext() ) {
              Poblacion pr=(Poblacion) iterador.next();
          
               ComboPoblacion.addItem(pr.getNombrePob());
                }
             
             codigoPoblacionAux=extraerCodigoPoblacionSeleccinada();
         }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos");
        }
        
    }
    
   /**
    * Extrae el c贸digo de la provincia seleccionada segun el indice del combobox 
    * 
    */
   public String extraerCodigoProvinciaSeleccinada(){
       
       Provincia pAux = listaProvincias.get(ComboProvincia.getSelectedIndex());
       
       return pAux.getCodigoProvincia();
       
   }
   
   /**
    * Extrae el c贸digo de la poblacion seleccionada segun el indice del combobox
    * 
    */
   public String extraerCodigoPoblacionSeleccinada(){
       
       Poblacion pAux = listaPoblaciones.get(ComboPoblacion.getSelectedIndex());
       
       return pAux.getCodPoblacion();
      
   }
   
   /**
    * Metodo al que se llama cuando se pulsa aceptar
    * 
    */
   public void Aceptar(){
       
       
       ResultSet consult=null;
       String aux=null;//Almacena el valor m谩ximo de las claves seleccionadas
       
       //El switch controla aceptar segun la forma en la que se muestra el formulario
       switch(opcionSeleccionada){
           case 1:
                    //Comprueba que la caja de texto est茅 correctamente
                    if(txtPoblacion.getText().equals("") || txtPoblacion.getText().equals("Nombre de la poblacion")){
                        JOptionPane.showMessageDialog(null, "Debe introducir un nombre de poblaci贸n");
                    }else{
                    if(txtNumHab.getText().equals("") || txtNumHab.getText().equals("Numero de Habitantes") || !conAux.esNumerico(txtNumHab.getText())){
                        JOptionPane.showMessageDialog(null, "Debe introducir el n煤mero de habitantes");
                    }else{
                        
                    try {
                    //Comprueba si el nombre de la poblacion escrito ya se encuentra en la tabla
                    consult=Principal.cbd.consultaSelect("SELECT * FROM poblaciones WHERE Poblacion='"+txtPoblacion.getText()+"'");
                   
                    if (!consult.next()){
                        
                        
                       // Selecciona los codigos de poblacion y ordena el campo de mayor a menor, para cojer el mayor numero
                       // , luego pasarlo a entero, incrementar su valor y usarlo como codigo de la nueva poblacion
                        conjuntoResultados=Principal.cbd.consultaSelect("SELECT CodigoPoblacion FROM poblaciones ORDER BY CodigoPoblacion DESC");
                        while(conjuntoResultados.next()){
                            aux = conjuntoResultados.getObject(1).toString();
                            break;
                        }
                        
                        int codigoNuevo = Integer.parseInt(aux);
                        codigoNuevo++;
                        aux=Integer.toString(codigoNuevo);
                        
                        //Inserta la nueva poblaci贸n
                       Principal.cbd.consultaUpdate("INSERT INTO `poblaciones` (`CodigoPoblacion`,`Poblacion`,`Habitantes`, `CodigoProvincia`) "
                               + "VALUES ('"+aux.toString()+"','"+txtPoblacion.getText().toString()+"','"+ txtNumHab.getText().toString() +"','"+codigoProvinciaAux.toString()+"');");
                       JOptionPane.showMessageDialog(null,"La poblacion " + txtPoblacion.getText() + " ha sido dada de Alta");
                       setVisible(false);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"ERROR, La poblaci贸n ya existe");
                    }
                    
                 } catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos");
                 }
                }
                }
                break;
           case 2:  if(txtCalle.getText().equals("") || txtPoblacion.getText().equals("Nombre de la calle")
                   || txtCP.getText().equals("") || txtCP.getText().equals("C贸digo Postal") || !conAux.esNumerico(txtCP.getText())){
                        JOptionPane.showMessageDialog(null, "Debe introducir el campo Calle y Codigo Postal");
                    }
                    else
                    {
                        if(ComboPoblacion.getSelectedItem().equals("--Vac铆o--")){
                            JOptionPane.showMessageDialog(null, "Debe seleccionar una poblacion");
                        }
                        else{
                        try {
                        consult=Principal.cbd.consultaSelect("SELECT * FROM callespoblaciones WHERE Nombre='"+txtCalle.getText()+"'");
                       
                           if (!consult.next()){
                               //Inserta la nueva calle
                                codigoPoblacionAux=extraerCodigoPoblacionSeleccinada();
                               Principal.cbd.consultaUpdate("INSERT INTO callespoblaciones (CodPoblacion,Nombre,CodPostal) VALUES "
                                       + "("+codigoPoblacionAux.toString()+",'"+txtCalle.getText().toString()+"',"+txtCP.getText().toString()+");");
                                JOptionPane.showMessageDialog(null,"La calle " + txtPoblacion.getText() + " ha sido dada de Alta");
                                setVisible(false);
                           }
                           else
                           {
                               JOptionPane.showMessageDialog(null,"ERROR, La calle ya existe");
                           }
                        
                        } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null,"Error en la conexi贸n con la base de datos"+ex.getMessage());
                        }
                        }
                    }
                break;
       }
   }
}
