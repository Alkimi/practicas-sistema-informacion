package gui;

import aplicacionjava.Cliente;
import aplicacionjava.Provincia;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import practica2.HiloInformeTartaProvincias;
import practica2.ReporteConsumoProporcion;

/**
 * Entorno grafico de los informes para el informe de sectores o tarta
 *
 * <br/><br/>Sistemas de Información <br/> Practica 2<br/> Grado Ingeniería
 * Informática T.I. <br/> Curso 2012/13
 *
 * @author Enrique José Miguel Calvo, Saúl Carranza Gallardo
 * @version 1.0
 *
 */
public class InformeTartaProvincias extends javax.swing.JFrame {

    ResultSet conjuntoResultados = null;
    List<Provincia> listaProvincias = new ArrayList<>();
    static List<Provincia> listaProvinciasAux = new ArrayList<>();
    String codigoProvinciaAux;

    /**
     * Creates new form InformeTartaProvincias
     */
    public InformeTartaProvincias() {
        initComponents();
        rellenaProvincias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ComboProvincias = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btAnadir = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtLista = new javax.swing.JList();
        btAceptar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        lbCargando = new javax.swing.JLabel();

        jLabel1.setText("Seleccione provincias a añadir:");

        btAnadir.setText("Añadir");
        btAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnadirActionPerformed(evt);
            }
        });

        txtLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        txtLista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtListaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(txtLista);

        btAceptar.setText("Generar Diagrama");
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComboProvincias, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btAnadir)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbCargando)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btCancelar)
                                .addGap(18, 18, 18)
                                .addComponent(btAceptar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboProvincias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAnadir))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbCargando)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btAceptar)
                    .addComponent(btCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtListaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtListaMouseClicked
    }//GEN-LAST:event_txtListaMouseClicked

    private void btAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnadirActionPerformed
        aniadir();
    }//GEN-LAST:event_btAnadirActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed
        aceptar();
    }//GEN-LAST:event_btAceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformeTartaProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformeTartaProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformeTartaProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformeTartaProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformeTartaProvincias().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboProvincias;
    private static javax.swing.JButton btAceptar;
    private javax.swing.JButton btAnadir;
    private static javax.swing.JButton btCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JLabel lbCargando;
    private javax.swing.JList txtLista;
    // End of variables declaration//GEN-END:variables

    public void mostrar() {
        setLocationRelativeTo(null);
        setVisible(true);
        listaProvinciasAux.clear();
    }

    /**
     * Rellena el combo de Provincias
     */
    private void rellenaProvincias() {
        //Borra el combobox
        ComboProvincias.removeAll();

        //Hago una consulta que me devuelva todas la provincias con sus códigos y las almaceno en conjuntoResultados
        try {
            conjuntoResultados = Principal.cbd.consultaSelect("SELECT * FROM  `provincias` ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }

        int numeroDeColumnas = 0;
        ResultSetMetaData metaDatos = null;


        try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();

            //creo el contador para ir pivotando entre las columnas de la tabla
            int cont = 0;
            String cod = null;
            String nom = null;

            while (conjuntoResultados.next()) {
                for (int i = 1; i <= numeroDeColumnas; i++) {

                    switch (cont) {
                        case 0:
                            cod = conjuntoResultados.getObject(i).toString();
                            cont = 1;
                            break;
                        case 1:
                            nom = conjuntoResultados.getObject(i).toString();
                            //creo un objeto provincia, variable
                            Provincia aux = new Provincia(cod, nom);
                            listaProvincias.add(aux);
                            cont = 0;
                            break;
                    }
                }
            }

            Iterator iterador = listaProvincias.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

            while (iterador.hasNext()) {
                Provincia pr = (Provincia) iterador.next();

                ComboProvincias.addItem(pr.getProvincia());

                codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
        }
    }

    /**
     * Extrae el código de la provincia seleccionada segun el indice del
     * combobox
     */
    private String extraerCodigoProvinciaSeleccinada() {

        Provincia pAux = listaProvincias.get(ComboProvincias.getSelectedIndex());

        return pAux.getCodigoProvincia();

    }

    /**
     * añade una provincia a la lista auxiliar y la quita del combo
     */
    private void aniadir() {
        Provincia pAux = listaProvincias.get(ComboProvincias.getSelectedIndex());
        listaProvinciasAux.add(pAux);
        listaProvincias.remove(ComboProvincias.getSelectedIndex());
        ComboProvincias.removeItemAt(ComboProvincias.getSelectedIndex());

        DefaultListModel listaAux = new DefaultListModel();

        Iterator iterador = listaProvinciasAux.listIterator();

        int cont = 1;
        while (iterador.hasNext()) {
            Provincia pro = (Provincia) iterador.next();
            listaAux.addElement(cont + ". " + pro.getProvincia().toString() + " -->" + pro.getCodigoProvincia());
            cont++;
        }

        txtLista.setModel(listaAux);
    }

    /**
     * al pulsar el boton aceptar se crea un nuevo hilo que realiza la consulta,
     * se comprueba que esten 4 provincias seleccionadas almenos.
     */
    private void aceptar() {
        if (listaProvinciasAux.size() < 4) {
            JOptionPane.showMessageDialog(null, "Debe introducir 4 provincias como mínimo");
        } else {
            HiloInformeTartaProvincias mh = new HiloInformeTartaProvincias();

            lbCargando.setText("Generando informes, espera...");
            btAceptar.setEnabled(false);
            btCancelar.setEnabled(false);

            mh.start();

        }
    }

    /**
     * realiza la consulta
     */
    public static void consultas() {
        // esta funcion esta incompleta falta toda la parte del hilo
        // tambien la generacion de los idProvincias no se si iria aqui o no
        // si los nombres de provincias asociados a los idProvicias no se pueden obtener
        // se modifica la consulta y lo saco por la consulta

        int aux = 0;


        try {
            //// sustituir por la funcion que haga lo que dice el codigo este
            aux = listaProvinciasAux.size();
            ///
            int[] idProvincia = new int[aux];
            String[] Provincia = new String[aux];
            for (int i = 0; i < aux; i++) {
                /// sustituir por la funcion que haga lo que dice el codigo este
                idProvincia[i] = Integer.parseInt(listaProvinciasAux.get(i).getCodigoProvincia());
                Provincia[i] = listaProvinciasAux.get(i).getProvincia();
                //////
            }
            new ReporteConsumoProporcion(idProvincia, Provincia);
            JOptionPane.showMessageDialog(null, "Informes generados correctamente");

            lbCargando.setText("");
            btAceptar.setEnabled(true);
            btCancelar.setEnabled(true);

        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Error al generar al informe " + ex.getMessage());
        }
    }
}
