/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import clases.Poblacion;
import clases.Provincia;
import clases.callespoblaciones;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author carranza
 */
public class NuevoCliente extends javax.swing.JFrame {
    
    ResultSet conjuntoResultados=null;
    List<Provincia> listaProvincias = new ArrayList<>();
    List<Poblacion> listaPoblaciones = new ArrayList<>();
    List<callespoblaciones> listaCalles = new ArrayList<>();
    String codigoProvinciaAux;
    String codigoPoblacionAux;
    String codigoCalleAux;
    String pobActual=null;

    /**
     * Creates new form NuevoCliente
     */
    public NuevoCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        txtPiso = new javax.swing.JTextField();
        lbPob2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ComboProv = new javax.swing.JComboBox();
        txtMetros = new javax.swing.JTextField();
        ComboPobla = new javax.swing.JComboBox();
        lbPob3 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        ComboCalle = new javax.swing.JComboBox();
        txtApellido2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btAceptar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nuevo Cliente");

        lbPob2.setText("Población");

        jLabel7.setText("Piso");

        jLabel2.setText("Provincia");

        jLabel8.setText("Metros");

        ComboProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboProvActionPerformed(evt);
            }
        });

        ComboPobla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboPoblaMouseClicked(evt);
            }
        });
        ComboPobla.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboPoblaItemStateChanged(evt);
            }
        });
        ComboPobla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPoblaActionPerformed(evt);
            }
        });
        ComboPobla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ComboPoblaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ComboPoblaFocusLost(evt);
            }
        });
        ComboPobla.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                ComboPoblaCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        lbPob3.setText("Calle");

        ComboCalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCalleActionPerformed(evt);
            }
        });

        jLabel3.setText("Apellido2");

        jLabel4.setText("Número");

        btAceptar.setText("Aceptar");
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Nombre");

        jLabel5.setText("Apellido");

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("**");

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel11.setText("**El Campo \"Piso\" es Opcional");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lbPob2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8)
                            .addComponent(lbPob3))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMetros, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(txtPiso, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtApellido2)
                            .addComponent(ComboPobla, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ComboProv, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombre)
                            .addComponent(txtApellido)
                            .addComponent(ComboCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAceptar)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ComboProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboPobla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPob2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPob3)
                    .addComponent(ComboCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(txtPiso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtMetros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btAceptar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ComboProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboProvActionPerformed
        rellenaPoblacion();
    }//GEN-LAST:event_ComboProvActionPerformed

    private void ComboCalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCalleActionPerformed

    }//GEN-LAST:event_ComboCalleActionPerformed

    private void ComboPoblaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPoblaActionPerformed
        rellenaCalle();        
    }//GEN-LAST:event_ComboPoblaActionPerformed

    private void ComboPoblaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ComboPoblaFocusGained
        
    }//GEN-LAST:event_ComboPoblaFocusGained

    private void ComboPoblaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboPoblaMouseClicked
     
    }//GEN-LAST:event_ComboPoblaMouseClicked

    private void ComboPoblaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboPoblaItemStateChanged
       
    }//GEN-LAST:event_ComboPoblaItemStateChanged

    private void ComboPoblaCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ComboPoblaCaretPositionChanged
        
    }//GEN-LAST:event_ComboPoblaCaretPositionChanged

    private void ComboPoblaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ComboPoblaFocusLost

    }//GEN-LAST:event_ComboPoblaFocusLost

    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed
        aceptar();
    }//GEN-LAST:event_btAceptarActionPerformed
  /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoCliente().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboCalle;
    private javax.swing.JComboBox ComboPobla;
    private javax.swing.JComboBox ComboProv;
    private javax.swing.JButton btAceptar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lbPob2;
    private javax.swing.JLabel lbPob3;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtApellido2;
    private javax.swing.JTextField txtMetros;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtPiso;
    // End of variables declaration//GEN-END:variables

    /**
     * Se encarga de mostrar el formulario
     */
    public void Mostrar(){
        setVisible(true);
        
        setLocationRelativeTo(null);
        
        rellenaProvincias();
        
        btAceptar.requestFocusInWindow();
    }
    
     /**
      * Rellena el combo de Provincias
      */
    public void rellenaProvincias(){
        //Borra el combobox
        ComboProv.removeAll();
        
        //Hago una consulta que me devuelva todas la provincias con sus códigos y las almaceno en conjuntoResultados
        try {
            conjuntoResultados=Principal.cbd.consultaSelect("SELECT * FROM  `provincias` ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
         int numeroDeColumnas=0;
         ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = conjuntoResultados.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            String cod=null;
            String nom=null;
            
            while (conjuntoResultados.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: cod=conjuntoResultados.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: nom=conjuntoResultados.getObject(i).toString();
                            //creo un objeto provincia, variable
                            Provincia aux = new Provincia(cod,nom); 
                            listaProvincias.add(aux);
                            cont=0;
                            break;
                }
            }
          }
            
            Iterator iterador = listaProvincias.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
 
            while( iterador.hasNext() ) {
                Provincia pr=(Provincia) iterador.next();
                
                ComboProv.addItem(pr.getProvincia());
                
                codigoProvinciaAux=extraerCodigoProvinciaSeleccinada();
                }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
    }
    
    /**
     * Extrae el código de la provincia seleccionada segun el indice del combobox 
     */
   public String extraerCodigoProvinciaSeleccinada(){
       
       Provincia pAux = listaProvincias.get(ComboProv.getSelectedIndex());
       
       return pAux.getCodigoProvincia();
       
   }
   
  /**
    * Extrae el código de la poblacion seleccionada segun el indice del combobox
    */
   public String extraerCodigoPoblacionSeleccinada(){
            Poblacion pAux = listaPoblaciones.get(ComboPobla.getSelectedIndex());
            pobActual=pAux.getNombrePob();
            return pAux.getCodPoblacion();
   }
   
   /**
    * Extrae el codigo de la calle seleccionada el combo
    * @return 
    */
   public String extraerCodigoCalleSeleccinada(){
       
       callespoblaciones cAux = listaCalles.get(ComboCalle.getSelectedIndex());
       
       return cAux.getIdCalle();
      
   }
   
   /**
    * Metodo encargado de rellenar el combo de poblacion
    */
    public void rellenaPoblacion(){
        
        //Borra el combobox
        ComboPobla.removeAllItems();
        //Borra la lista de poblaciones
        listaPoblaciones.clear();
        //Extrae el codigo de la provincia seleccionada
        codigoProvinciaAux = extraerCodigoProvinciaSeleccinada();
        
        ResultSet results = null;
    
        //Hago una consulta que me devuelva las poblaciones de la provincia seleccionada
        try {
            results=Principal.cbd.consultaSelect("SELECT CodigoProvincia,CodigoPoblacion,Poblacion FROM poblaciones WHERE CodigoProvincia="+codigoProvinciaAux);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
         //Declaro algunas variables para poder rellenar el combo
        int numeroDeColumnas=0;
        ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = results.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //Creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            //Variables que almacenan los datos que se añaden al final del bucle
            String codProv=null;
            String codPob=null;
            String nom=null;
            
            while (results.next()) {
            for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: codProv=results.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: codPob=results.getObject(i).toString();
                            cont=2;
                            break;
                    case 2: nom=results.getObject(i).toString();
                            //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                            Poblacion aux = new Poblacion(codProv,codPob,nom); 
                            listaPoblaciones.add(aux);
                            cont=0; //para que vuelva a rellenar desde el primer campo
                            break;
                }
            }
          }
            
         //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
         Iterator iterador = listaPoblaciones.listIterator();
         
         //En caso de no existir ninguna poblacion para la provincia muestro en el combo vacio, sino relleno el combo
         if(listaPoblaciones.isEmpty()){
             ComboPobla.addItem("--Vacío--");
             
             codigoPoblacionAux=null;
         }
         else
         {
             while( iterador.hasNext() ) {
              Poblacion pr=(Poblacion) iterador.next();
          
               ComboPobla.addItem(pr.getNombrePob());
                }
             
             codigoPoblacionAux=extraerCodigoPoblacionSeleccinada();
         }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
    }
    
    /**
     * Rellena el combo de la calle
     */
    public void rellenaCalle(){
        String op=null;
        
        try{
        
        //Borra el combobox
        ComboCalle.removeAllItems();
        //Borra la lista de calles
        listaCalles.clear();
        //Extrae el codigo de la poblacion seleccionada
        codigoPoblacionAux = extraerCodigoPoblacionSeleccinada();
        
        ResultSet results2=null;
        
        
    
        //Hago una consulta que me devuelva las calles de la poblacion seleccionada
        try {
            
            results2=Principal.cbd.consultaSelect("SELECT idCalle,CodPoblacion,Nombre FROM callespoblaciones WHERE CodPoblacion="+codigoPoblacionAux);
         
        
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
        
         //Declaro algunas variables para poder rellenar el combo
        int numeroDeColumnas=0;
        ResultSetMetaData metaDatos = null;
        
         
         try {
            metaDatos = results2.getMetaData();
            numeroDeColumnas = metaDatos.getColumnCount();
            
            //Creo el contador para ir pivotando entre las columnas de la tabla
            int cont=0;
            //Variables que almacenan los datos que se añaden al final del bucle
            String idCalle=null;
            String codPob=null;
            String nom=null;
            
            
                while (results2.next()) {
                for (int i = 1; i <= numeroDeColumnas; i++) {
                
                switch(cont){
                    case 0: idCalle=results2.getObject(i).toString();
                            cont=1;
                            break;
                    case 1: codPob=results2.getObject(i).toString();
                            cont=2;
                            break;
                    case 2: nom=results2.getObject(i).toString();
                            //Creo un objeto poblacion y añado los datos que se han ido recogiendo el switch
                            callespoblaciones aux = new callespoblaciones(idCalle,codPob,nom); 
                            listaCalles.add(aux);
                            cont=0; //para que vuelva a rellenar desde el primer campo
                            break;
                }
            }
            
          }
            
         //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
         Iterator iterador = listaCalles.listIterator();
         
         //En caso de no existir ningun objeto para el codigo seleccionado muestro en el combo vacio, sino relleno el combo
         if(listaCalles.isEmpty()){
             ComboCalle.addItem("--Vacío--");
             
             codigoCalleAux=null;
         }
         else
         {
             while( iterador.hasNext() ) {
              callespoblaciones pr=(callespoblaciones) iterador.next();
                if(pr.getNombre().equals(ComboPobla.getSelectedItem().toString())){
                    ComboCalle.removeAll();
                    ComboCalle.addItem("--Vacío--");
                    }
                else{
                    ComboCalle.addItem(pr.getNombre());
                    op=pr.getNombre();
                }
                }
             
             codigoCalleAux=extraerCodigoCalleSeleccinada();
         }
         
         //Controla problema de duplicidad comboBox
         if(pobActual.equals(op)){
                ComboCalle.removeAllItems();
                ComboCalle.addItem("--Vacío--");
        }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
        }
         //Controla la posibilidad de que se pulse el botón actualizar calles antes de tiempo
        }catch(IndexOutOfBoundsException asd){
            ComboCalle.addItem("--Vacío--");
        }
    }
    
    /**
     * Metodo al que llama el botón aceptar
     */
    public void aceptar(){
        try{
            //Control de los campos nombre y apellidos
        if(txtNombre.getText().equals("") || txtApellido.equals("") || txtApellido2.equals("")){
            JOptionPane.showMessageDialog(null, "Debe introducir nombres y apellidos");
        }
        else{
            //Control de los combo
            if(ComboPobla.getSelectedItem().equals("--Vacío--") || ComboCalle.getSelectedItem().equals("--Vacío--")){
                JOptionPane.showMessageDialog(null, "Debe seleccionar Provincia, Poblacion y Calle "
                        + "\n Recuerde pulsar actualizar calles despues de seleccionar la Poblacion");
            }
            else{
                //Control de campos numero y metros
                if(txtNumero.getText().equals("") || txtMetros.getText().equals("")){
                       JOptionPane.showMessageDialog(null, "Debe introducir todos los campos necesarios");
                }
                else{
                 ResultSet consult = null;
                    try {
                        String aux=extraerCodigoPoblacionSeleccinada();
                        String aux2=extraerCodigoCalleSeleccinada();
                        String aux3=extraerCodigoProvinciaSeleccinada();
                            
                        //Realizo una consulta, para evitar que se introduzca un cliente duplicado
                             consult=Principal.cbd.consultaSelect("SELECT * FROM clientes WHERE Nombre='"+ txtNombre.getText() +"' && Apellido='"+ txtApellido.getText() +"' "
                               + "&& Calle='"+ aux2 +"' && CodigoPoblacion='"+ aux +"'");
                        
                        if (!consult.next()){
                            
                            //Controlo que se rellene o no la casilla del piso, puesto que es un dato opcional
                            String piso = null;
                            if(txtPiso.getText().equals("")){
                                piso="NULL";
                            }else{
                                piso=txtPiso.getText();
                            }
                            
                            //---INSERT a la base de datos
                            Principal.cbd.consultaUpdate("INSERT INTO clientes (Nombre,Apellido,Apellido2,Calle,Numero,Piso,Metros,CodigoPoblacion,CodigoProvincia) "
                                    + "VALUES ('"+txtNombre.getText()+"','"+txtApellido.getText()+"','"+txtApellido2.getText()+"','"+ aux2 +"','"+txtNumero.getText()+"',"
                                    + "'"+piso+"','"+txtMetros.getText()+"','"+aux+"','"+aux3+"');");
                            
                            JOptionPane.showMessageDialog(null,"Cliente añadido correctamente");
                            setVisible(false);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "El cliente indicado ya existe en la base de datos");
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null,"Error en la conexión con la base de datos");
                    
                    }
                }
            }
        }
        //Excepción que controla que se evite el error de los combo cuando pulsas aceptar, si estos no estan rellenos
        }catch (NullPointerException asd){
               JOptionPane.showMessageDialog(null, "Debe seleccionar Provincia, Poblacion y Calle "
                        + "\n Recuerde pulsar actualizar calles despues de seleccionar la Poblacion");
        }
    }
}

   
   

